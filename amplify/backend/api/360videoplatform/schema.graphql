type Video @model
  @auth(
    rules: [
      { allow: owner },  # Allows the owner to create, update, delete, and read their own videos
      { allow: private, operations: [create, update, delete, read] } # Allow authenticated users to create, update, delete, and read videos
    ]
  ) {
  id: ID!
  title: String!
  description: String
  tags: [String]
  category: String
  videoUrl: String!
  thumbnailUrl: String
  isForKids: Boolean
  isRestricted: Boolean
  playlist: String
  scheduleTime: AWSDateTime
  timezone: String
  duration: Int!            
  viewCount: Int!           
  favoriteCount: Int!  
  isAQOriginal: Boolean     
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  isPublic: Boolean!
  owner: String
  favorites: [Favorite] @hasMany(indexName: "byVideo", fields: ["id"])  # Establish the relationship
  userActivity: [UserActivity] @hasMany(indexName: "byVideo", fields: ["id"])  # Establish the relationship
}

type User @model @auth(rules: [{ allow: owner }]) {
  id: ID!
  username: String!
  email: String!
  favoriteVideos: [Favorite] @hasMany(indexName: "byUser", fields: ["id"])
}

type Favorite @model
  @auth(rules: [
    { allow: owner },
  { allow: private, operations: [create, update, delete, read] }]
  ) {
  id: ID!
  userId: ID! @index(name: "byUser", sortKeyFields: ["videoId"])
  videoId: ID! @index(name: "byVideo", sortKeyFields: ["userId"])
  video: Video @belongsTo(fields: ["videoId"])
  createdAt: AWSDateTime
}

type UserActivity @model
  @auth(rules: [{ allow: owner }]) {
  id: ID!
  userId: ID! @index(name: "byUser", sortKeyFields: ["videoId"])
  videoId: ID! @index(name: "byVideo", sortKeyFields: ["userId"])
  video: Video @belongsTo(fields: ["videoId"])
  progress: Int              # Progress in seconds
  lastWatchedAt: AWSDateTime
  createdAt: AWSDateTime
}
